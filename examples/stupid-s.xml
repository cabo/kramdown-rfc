<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.39 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-hartke-xmpp-stupid-00" category="info">

  <front>
    <title abbrev="STuPiD">STUN/TURN using PHP in Despair</title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Universität Bremen TZI</organization>
      <address>
        <email>hartke@tzi.org</email>
      </address>
    </author>
    <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universität Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <facsimile>+49-421-218-7000</facsimile>
        <email>cabo@tzi.org</email>
      </address>
    </author>

    <date year="2009" month="July" day="05"/>

    <area>General</area>
    <workgroup>XMPP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>NAT (Network Address Translator) Traversal may require TURN
(Traversal Using Relays around NAT) functionality in certain
cases that are not unlikely to occur.  There is little
incentive to deploy TURN servers, except by those who need
them — who may not be in a position to deploy a new protocol
on an Internet-connected node, in particular not one with
deployment requirements as high as those of TURN.</t>

<t>“STUN/TURN using PHP in Despair” is a highly deployable
protocol for obtaining TURN-like functionality, while also
providing the most important function of STUN.</t>



    </abstract>


  </front>

  <middle>


<section anchor="problems" title="Introduction">

<t>NAT (Network Address Translator) Traversal may require TURN
(Traversal Using Relays around NAT)
<xref target="I-D.ietf-behave-turn"/>
functionality in certain
cases that are not unlikely to occur.  There is little
incentive to deploy TURN servers, except by those who need
them — who may not be in a position to deploy a new protocol
on an Internet-connected node, in particular not one with
deployment requirements as high as those of TURN.</t>

<t>“STUN/TURN using PHP in Despair” is a highly deployable
protocol for obtaining TURN-like functionality, while also
providing the most important function of STUN
<xref target="STUN"/>.</t>

<t>The high degree of deployability is achieved by making STuPiD
a Web service, implementable in any Web application deployment
scheme.  As PHP appears to be the solution of choice for
avoiding deployment problems in the Web world, a PHP-based
sample implementation of STuPiD is presented in <xref target="figimpl"/> in <xref target="impl"/>.
(This single-page script has been tested with a free-of-charge
web hoster, so it should be deployable by literally everyone.)</t>

<section anchor="need" title="The Need for Standardization">

<t>If STuPiD is so easy to deploy, why standardize on it?
First of all, STuPiD server implementations will be done by
other people than the clients making use of the service.
Clearly communicating between these communities is a good
idea, in particular if there are security considerations.</t>

<t>Having one standard form of STuPiD service instead of one
specific to each kind of client also creates an incentive
for optimized implementations.</t>

<t>Finally, where STuPiD becomes part of a client standard
(such as a potential extension to XMPP’s in-band byte-stream
protocol <xref target="XMPP"/> as hinted in <xref target="xmpp"/>), it is a good
thing if STuPiD is already defined.</t>

<t>Hence, this document focuses on the definition of the STuPiD
service itself, tries to make this as general as possible
without increasing complexity or cost and leaves the details
of any client standards to future documents.</t>

</section>
</section>
<section anchor="ops" title="Basic Protocol Operation">

<t>The STuPiD protocol will typically be used with application
instances that first attempt to obtain connectivity using
mechanisms similar to those described in the STUN
specification <xref target="STUN"/>.  However, with STuPiD,
STUN is not really needed for TCP, as was demonstrated in
previous STUN-like implementations <xref target="STUNT"/>.
Instead, STuPiD (like <xref target="STUNT"/>) provides a
simple Web service that
echoes the remote address and port of an incoming HTTP
request; in most cases, this is enough to get the job done.</t>

<t>In case no connection can be established with this simple
STUN(T)-like mechanism, a TURN-like relay is needed as a final
fall-back.
The STuPiD protocol supports this, but solely provides a way
for the data to be
relayed.  STuPiD relies on an out-of-band channel to notify
the peer whenever new data is available (synchronization signal).
See <xref target="xmpp"/> for one likely example of such an
out-of-band channel.
(Note that the out-of-band channel may have a much lower
throughput than the STuPiD relay channel — this is exactly
the case in the example provided in <xref target="xmpp"/>,
where the out-of-band channel is typically throughput-limited
to on the order of a few kilobits per second.)</t>

<t>By designing the STuPiD web service in such a way that it can
be implemented by a simple PHP script such as that presented
in <xref target="impl"/>, it is easy to deploy by those who
need the STuPiD services.
The combination of the low-throughput out-of-band channel for
synchronization and the STuPiD web service for bulk data
relaying is somewhat silly but gets the job done.</t>

<t>The STuPiD data relay is implemented as follows (see <xref target="figops"/>):</t>

<t><list style="numbers">
  <t>Peer A, the source of the data to be relayed, stores a chunk of
data at the STuPiD server using an opaque identifier, the “chunk
identifier”. How that chunk identifier is chosen is local to Peer
A; it could be composed of a random session id and a sequence number.</t>
  <t>Peer A notifies the receiver of the data, Peer
B, that a new data chunk is available, specifying the URI needed
for retrieval.
This notification is provided through an out-out-band channel.
(As an optimization for multiple consecutive transfers, A might
inform B once of a constant prefix of that URI and only send a
varying part such as a sequence number in each notification —
this is something to be decided in the client-client notification
protocol.)</t>
  <t>Peer B retrieves the data from the STuPiD server using the URI
provided by Peer A.</t>
</list></t>

<t>Note that the data transfer mechanism is one-way, i.e. to send
data in the other direction as well, Peer B needs to perform
the same steps using a STuPiD server at the same or a
different location.</t>

<figure title="STuPiD Protocol Operation" anchor="figops"><artwork><![CDATA[

        STuPiD   ```````````````````````````````,
        Script   <----------------------------. ,
                                              | ,
          ^ ,                                 | ,
          | ,                                 | ,
    (1)   | ,                                 | ,  (3)
    POST  | ,                                 | ,  GET
          | ,                                 | ,
          | v                                 | v

        Peer A   ----------------------->   Peer B
                           (2)
                       out-of-band
                       Notification
]]></artwork></figure>

</section>
<section anchor="protocol-definition" title="Protocol Definition">

<section anchor="Terminology" title="Terminology">
<t>In this document, the key words “MUST”, “MUST NOT”, “REQUIRED”,
“SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”,
and “OPTIONAL” are to be interpreted as described in BCP 14, RFC 2119
<xref target="BCP14"/> and indicate requirement levels for compliant STuPiD
implementations.</t>

</section>
<section anchor="discovering-external-ip-address-and-port" title="Discovering External IP Address and Port">

<t>A client may discover its external IP address and the port
required for port prediction by performing a HTTP GET
request to a STuPiD server. The STuPiD server MUST reply
with the remote address and remote port in the following
format:</t>

<t>host “:” port</t>

<t>where ‘host’ and ‘port’ are defined as in <xref target="RFC3986"/>.</t>

</section>
<section anchor="storing-data" title="Storing Data">

<t>Data chunks are stored using the POST request of HTTP. The
STuPiD server MUST support one URI parameter which is passed
as query-string:</t>

<t>‘chid’:  A unique ID identifying the data chunk to be stored.
The ID SHOULD be chosen from the characters of the base64url
set <xref target="BASE64"/>.</t>

<t>The payload of the POST request MUST be the data to be
stored. The ‘Content-Type’ SHOULD be
‘application/octet-stream’, although a STuPiD server
implementation SHOULD simply ignore the ‘Content-Type’ as a
client implementation may be restricted and may not able to
specify a specific ‘Content-Type’.  (E.g., in certain cases,
the peer may be limited to sending the data as
multipart-form-encoded — still, the data is stored as a
byte stream.)</t>

<t>STuPiD servers may reject data chunks that are larger than
some predefined limit.
This maximum size in bytes of each data chunk is RECOMMENDED
to be 65536 or more.</t>

<t>As HTTP already provides data transparency,
the data chunk SHOULD NOT be encoded using Base64 or any
other data transparency mechanism; in any case, the STuPiD
server will not attempt to decode the chunk.</t>

<t>The sender MUST wait for the HTTP response before
going on to notify the receiver.</t>

</section>
<section anchor="notification" title="Notification">

<t>The sender notifies the receiver of the data chunk by passing
via an out-of-band channel (which is not part of the STuPiD
protocol):</t>

<t>The full URL from which the data chunk can be retrieved,
i.e. the same URL that was used to store the data chunk,
including the chunk ID parameter.</t>

<t>The exact notification mechanism over the out-of-band channel
and the definition of a session is dependent on the
out-of-band channel.  See <xref target="xmpp"/> for one
example of such an out-of-band channel.</t>

</section>
<section anchor="retrieving-data" title="Retrieving Data">

<t>The notified peer retrieves the data chunk using a GET request
with the URL supplied by the sender. The STuPiD server MUST
set the ‘Content-Type’ of the returned body to
‘application/octet-stream’.</t>

</section>
</section>
<section anchor="implementation-notes" title="Implementation Notes">

<t>A STuPiD server implementation SHOULD delete stored data some
time after it was stored. It is RECOMMENDED not to delete the
data before five minutes have elapsed after it was stored.
Different client protocols will have different reactions to
data that have been deleted prematurely and cannot be
retrieved by the notified peer; this may be as trivial as
packet loss or it may cause a reliable byte-stream to fail
(<xref target="impl"/>).
(TODO: It may be useful to provide some hints in the storing
POST request.)</t>

<t>STuPiD clients should aggregate data in order to minimize the
number of requests to the STuPiD server per second.
The specific aggregation method chosen depends on the data
rate required (and the maximum chunk size), the latency
requirements, and the application semantics.</t>

<t>Clearly, it is up to the implementation to decide how the data
chunks are actually stored.  A sufficiently silly STuPiD server
implementation might for instance use a MySQL database.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The security objectives of STuPiD are to be as secure as if
NAT traversal had succeeded, i.e., an on-path attacker can
overhear and fake messages, but an off-path attacker cannot.
If a higher level of security is desired, it should be
provided on top of the data relayed by STuPiD, e.g. by using
XTLS <xref target="I-D.meyer-xmpp-e2e-encryption"/>.</t>

<t>Much of the security of STuPiD is based on the assumption that
an off-path attacker cannot guess the chunk identifiers.  A
suitable source of randomness <xref target="RFC4086"/> should
be used to generate at least a sufficiently large part of the
chunk identifiers (e.g., the chunk identifier could be a hard
to guess prefix followed by a serial number).</t>

<t>To protect the STuPiD server against denial of service and
possibly some forms of theft of service, it is RECOMMENDED
that the POST side of the STuPiD server be protected by some
form of authentication such as HTTP authentication.  There is
little need to protect the GET side.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3986" target='http://www.rfc-editor.org/info/rfc3986'>
<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='T. Berners-Lee'><organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'><organization /></author>
<author initials='L.' surname='Masinter' fullname='L. Masinter'><organization /></author>
<date year='2005' month='January' />
<abstract><t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='66'/>
<seriesInfo name='RFC' value='3986'/>
<seriesInfo name='DOI' value='10.17487/RFC3986'/>
</reference>



<reference  anchor="RFC4086" target='http://www.rfc-editor.org/info/rfc4086'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'><organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'><organization /></author>
<date year='2005' month='June' />
<abstract><t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts.  However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities.  The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t><t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult.  This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities.  It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='106'/>
<seriesInfo name='RFC' value='4086'/>
<seriesInfo name='DOI' value='10.17487/RFC4086'/>
</reference>



<reference  anchor="BCP14" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="BASE64" target='http://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="STUNT" target="http://deusty.blogspot.com/2007/09/stunt-out-of-band-channels.html">
  <front>
    <title>STUNT &amp; out-of-band channels</title>
    <author initials="R." surname="Hanson" fullname="Robbie Hanson">
      <organization></organization>
    </author>
    <date year="2007" month="September" day="17"/>
  </front>
</reference>




<reference anchor="I-D.meyer-xmpp-e2e-encryption">
<front>
<title>XTLS: End-to-End Encryption for the Extensible Messaging and Presence Protocol (XMPP) Using Transport Layer Security (TLS)</title>

<author initials='D' surname='Meyer' fullname='Dirk Meyer'>
    <organization />
</author>

<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>

<date month='June' day='29' year='2009' />

<abstract><t>This document specifies "XTLS", a protocol for end-to-end encryption of Extensible Messaging and Presence Protocol (XMPP) traffic.  XTLS is an application-level usage of Transport Layer Security (TLS) that is set up using the XMPP Jingle extension for session negotiation and transported using any streaming transport as the data delivery mechanism.  Thus XTLS treats the end-to-end exchange of XML stanzas as a virtual transport and uses TLS to secure that transport, enabling XMPP entities to communicate in a way that is designed to ensure the confidentiality and integrity XML stanzas.  The protocol can be used for secure end-to-end messaging as well as other XMPP applications, such as file transfer.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-meyer-xmpp-e2e-encryption-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-meyer-xmpp-e2e-encryption-02.txt' />
</reference>



<reference anchor="I-D.ietf-behave-turn">
<front>
<title>Traversal Using Relays around NAT (TURN): Relay Extensions to Session Traversal Utilities for NAT (STUN)</title>

<author initials='J' surname='Rosenberg' fullname='Jonathan Rosenberg'>
    <organization />
</author>

<author initials='R' surname='Mahy' fullname='Rohan Mahy'>
    <organization />
</author>

<author initials='P' surname='Matthews' fullname='Philip Matthews'>
    <organization />
</author>

<date month='July' day='3' year='2009' />

<abstract><t>If a host is located behind a NAT, then in certain situations it can be impossible for that host to communicate directly with other hosts (peers).  In these situations, it is necessary for the host to use the services of an intermediate node that acts as a communication relay.  This specification defines a protocol, called TURN (Traversal Using Relays around NAT), that allows the host to control the operation of the relay and to exchange packets with its peers using the relay.  TURN differs from some other relay control protocols in that it allows a client to communicate with multiple peers using a single relay address.  The TURN protocol was designed to be used as part of the ICE (Interactive Connectivity Establishment) approach to NAT traversal, though it can be also used without ICE.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-behave-turn-16' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-behave-turn-16.txt' />
</reference>



<reference  anchor="STUN" target='http://www.rfc-editor.org/info/rfc5389'>
<front>
<title>Session Traversal Utilities for NAT (STUN)</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='R.' surname='Mahy' fullname='R. Mahy'><organization /></author>
<author initials='P.' surname='Matthews' fullname='P. Matthews'><organization /></author>
<author initials='D.' surname='Wing' fullname='D. Wing'><organization /></author>
<date year='2008' month='October' />
<abstract><t>Session Traversal Utilities for NAT (STUN) is a protocol that serves as a tool for other protocols in dealing with Network Address Translator (NAT) traversal.  It can be used by an endpoint to determine the IP address and port allocated to it by a NAT.  It can also be used to check connectivity between two endpoints, and as a keep-alive protocol to maintain NAT bindings.  STUN works with many existing NATs, and does not require any special behavior from them.</t><t>STUN is not a NAT traversal solution by itself.  Rather, it is a tool to be used in the context of a NAT traversal solution.  This is an important change from the previous version of this specification (RFC 3489), which presented STUN as a complete solution.</t><t>This document obsoletes RFC 3489.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5389'/>
<seriesInfo name='DOI' value='10.17487/RFC5389'/>
</reference>



<reference anchor="XMPP">
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Core</title>

<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>

<date month='December' day='20' year='2010' />

<abstract><t>The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language (XML) that enables the near-real-time exchange of structured yet extensible data between any two or more network entities.  This document defines XMPP's core protocol methods: setup and teardown of XML streams, channel encryption, authentication, error handling, and communication primitives for messaging, network availability ("presence"), and request-response interactions.  This document obsoletes RFC 3920.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-3920bis-22' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-3920bis-22.txt' />
</reference>




    </references>


<section anchor="xmp" title="Examples">

<t>This appendix provides some examples of the STuPiD protocol operation.</t>

<figure title="Discovering External IP Address and Port" anchor="figxmpdisco"><artwork><![CDATA[
   Request:

      GET /stupid.php HTTP/1.0
      User-Agent: Example/1.11.4
      Accept: */*
      Host: example.org
      Connection: Keep-Alive

   Response:

      HTTP/1.1 200 OK
      Date: Sun, 05 Jul 2009 00:30:37 GMT
      Server: Apache/2.2
      Cache-Control: no-cache, must-revalidate
      Expires: Sat, 26 Jul 1997 05:00:00 GMT
      Vary: Accept-Encoding
      Content-Length: 17
      Keep-Alive: timeout=1, max=400
      Connection: Keep-Alive
      Content-Type: application/octet-stream

      192.0.2.239:36654
]]></artwork></figure>

<figure title="Storing Data" anchor="figxmpstore"><artwork><![CDATA[
   Request:

      POST /stupid.php?chid=i781hf64-0 HTTP/1.0
      User-Agent: Example/1.11.4
      Accept: */*
      Host: example.org
      Connection: Keep-Alive
      Content-Type: application/octet-stream
      Content-Length: 11

      Hello World

   Response:

      HTTP/1.1 200 OK
      Date: Sun, 05 Jul 2009 00:20:34 GMT
      Server: Apache/2.2
      Cache-Control: no-cache, must-revalidate
      Expires: Sat, 26 Jul 1997 05:00:00 GMT
      Vary: Accept-Encoding
      Content-Length: 0
      Keep-Alive: timeout=1, max=400
      Connection: Keep-Alive
      Content-Type: application/octet-stream
]]></artwork></figure>

<figure title="Retrieving Data" anchor="figxmpretr"><artwork><![CDATA[
   Request:

      GET /stupid.php?chid=i781hf64-0 HTTP/1.0
      User-Agent: Example/1.11.4
      Accept: */*
      Host: example.org
      Connection: Keep-Alive

   Response:

      HTTP/1.1 200 OK
      Date: Sun, 05 Jul 2009 00:21:29 GMT
      Server: Apache/2.2
      Cache-Control: no-cache, must-revalidate
      Expires: Sat, 26 Jul 1997 05:00:00 GMT
      Vary: Accept-Encoding
      Content-Length: 11
      Keep-Alive: timeout=1, max=400
      Connection: Keep-Alive
      Content-Type: application/octet-stream

      Hello World
]]></artwork></figure>

</section>
<section anchor="impl" title="Sample Implementation">

<figure title="STuPiD Sample Implementation" anchor="figimpl"><artwork><![CDATA[
<?php
header("Cache-Control: no-cache, must-revalidate");
header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
header("Content-Type: application/octet-stream");

mysql_connect(localhost, "username", "password");
mysql_select_db("stupid");

$chid = mysql_real_escape_string($_GET["chid"]);

if ($_SERVER["REQUEST_METHOD"] == "GET") {
   if (empty($chid)) {
      echo $_SERVER["REMOTE_ADDR"] . ":" . $_SERVER["REMOTE_PORT"];
   } elseif ($result = mysql_query("SELECT `data` FROM `Data` " .
                         "WHERE `chid` = '$chid'")) {
      if ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
         echo base64_decode($row["data"]);
      } else {
         header("HTTP/1.0 404 Not Found");
      }
      mysql_free_result($result);
   } else {
      header("HTTP/1.0 404 Not Found");
   }
} elseif ($_SERVER["REQUEST_METHOD"] == "POST") {
   if (empty($chid)) {
      header("HTTP/1.0 404 Not Found");
   } else {
      mysql_query("DELETE FROM `Data` " .
                  "WHERE `timestamp` < DATE_SUB(NOW(), INTERVAL 5 MINUTE)");
      $data = base64_encode(file_get_contents("php://input"));
      if (!mysql_query("INSERT INTO `Data` (`chid`, `data`) " .
                       "VALUES ('$chid', '$data')")) {
         header("HTTP/1.0 403 Bad Request");
      }
   }
} else {
   header("HTTP/1.0 405 Method Not Allowed");
   header("Allow: GET, HEAD, POST");
}
mysql_close();
?>
]]></artwork></figure>

</section>
<section anchor="xmpp" title="Using XMPP as Out-Of-Band Channel">

<t>XMPP <xref target="XMPP"/> is a good choice for
an out-of-band channel.</t>

<t>The notification protocol is closely modeled after XMPP’s
In-Band Bytestreams (IBB, see
http://xmpp.org/extensions/xep-0047.html). Just replace the
namespace and insert the STuPiD Retrieval URI instead of the
actual Base64 encoded data, see <xref target="figxmpnots"/>.
(Note that the current proposal redundantly sends a sid and a
seq as well as the chid composed of these two; it may be
possible to optimize this, possibly sending the constant prefix
of the URI once at bytestream creation time.)</t>

<t>Notifications MUST be processed in the order they are
received. If an out-of-sequence notification is received for a
particular session (determined by checking the ‘seq’ attribute),
then this indicates that a notification has been lost. The
recipient MUST NOT process such an out-of-sequence notification,
nor any that follow it within the same session; instead, the
recipient MUST consider the session invalid.  (Adapted from
http://xmpp.org/extensions/xep-0047.html#send)</t>

<t>Of course, other methods can be used for setup and teardown, such as Jingle
(see http://xmpp.org/extensions/xep-0261.html).</t>

<figure title="Creating a Bytestream: Initiator requests session" anchor="figxmpcri"><artwork><![CDATA[
      <iq from='romeo@montague.net/orchard'
          id='jn3h8g65'
          to='juliet@capulet.com/balcony'
          type='set'>
        <open xmlns='urn:xmpp:tmp:stupid'
              block-size='65536'
              sid='i781hf64'
              stanza='iq'/>
      </iq>
]]></artwork></figure>

<figure title="Creating a Bytestream: Responder accepts session" anchor="figxmpcrr"><artwork><![CDATA[
      <iq from='juliet@capulet.com/balcony'
          id='jn3h8g65'
          to='romeo@montague.net/orchard'
          type='result'/>
]]></artwork></figure>

<figure title="Sending Notifications: Notification in an IQ stanza" anchor="figxmpnots"><artwork><![CDATA[
      <iq from='romeo@montague.net/orchard'
          id='kr91n475'
          to='juliet@capulet.com/balcony'
          type='set'>
        <data xmlns='urn:xmpp:tmp:stupid'
              seq='0'
              sid='i781hf64'
              url='http://example.org/stupid.php?chid=i781hf64-0'/>
      </iq>
]]></artwork></figure>

<figure title="Sending Notifications: Acknowledging notification using IQ" anchor="figxmpnota"><artwork><![CDATA[
      <iq from='juliet@capulet.com/balcony'
          id='kr91n475'
          to='romeo@montague.net/orchard'
          type='result'/>
]]></artwork></figure>

<figure title="Closing the Bytestream: Request" anchor="figxmpclor"><artwork><![CDATA[
      <iq from='romeo@montague.net/orchard'
          id='us71g45j'
          to='juliet@capulet.com/balcony'
          type='set'>
        <close xmlns='urn:xmpp:tmp:stupid'
               sid='i781hf64'/>
      </iq>
]]></artwork></figure>

<figure title="Closing the Bytestream: Success response" anchor="figxmpclos"><artwork><![CDATA[
      <iq from='juliet@capulet.com/balcony'
          id='us71g45j'
          to='romeo@montague.net/orchard'
          type='result'/>
]]></artwork></figure>

</section>


  </back>

<!-- ##markdown-source:
H4sIAE3ArlgAA+1c63Ijx3X+P0/Rhlwh6AAgeNkLsaJl3qSltUtSJNayo1J2
BzMNYMTBDDQXcuE1U3mIPELeJG+SJ8n3ne6eGWBJLuXa2OVUUJIFzvTl9Ll+
55yGu92uV0RFrAfqcvjmdGP45uJUlXmUTNT5y3MVJepI53M/yjx/NMr0NYeV
59GRF6ZB4s8wLcz8cdGd+llxpbvvZ/N5Ny/KeRR2+30v9AuM2Or3d7v9Z93+
Ey/Ag0maLQZYeZx6XjTPBqrIyrzgoP6W52faH6hvdKIzP/Zu0uxqkqXlfKD+
+Pr8XH2Pv0naN3zmXekFBoQDdZIUOkt00T0iLZ6XF34SvvXjNMHuC51782ig
fijSoKPyNCsyPc7xbTHjlx89zy+LaZoNPNX1FD5Rkg/Utz31Uo4kj8xJv439
Mm8+TrOJn0R/9osoTQbqTRJd6yyPiv/6z0IdZHqmEzX8lxMZqWd+FA+U4dLv
ij9HPcxd2vCwpw7SbOYnSWPHQz/LCyzTfIOJD++V44C6GKjzNC/GfjBV29v9
nZ2+vAuiArw3E8yDNMQ+R92t59tPdu2TMikooW80N13Iw/lUePnPO7vdna3N
7tbm8+7T7d2tTXmJTfJoFsUrA571+/3m4QN/lFZH9xIeqcApwHd18fXh9u7z
p/brTp9fPWpIYwzVcziQBQs/m/CE06KYDzY2Qg39WfRGcTrJ52nRC9LZBtTp
2UZ/dwO6mBTdtMS/4+4IatENpuCkjvPetJjFZrla/4fqn1RjsHKDZVylJ6qW
0EU6GkUaSpHkaWLfiDwves2HlSHACna7m8/w8KR71Jvphc6M0egt3dVJkC3m
ok0ePt1uV/kjiNMPoNSn+0PVPtUFbULth2Gm81wNM+wR+0WarfM7dcKP1cxf
qEz/XEaZVjRor12/eyO2faFjf5ErH3aEU2LpdTUuk4Bb+zF0hIYf6KzwowQ2
m+tcFVO/wHitkrRQZRJHVzpeqCJVaRCUWU+p4VTjbZQrzAc/Ib5AJxQeB4V6
HqcLIUblOiMtHaXfB3peqBGWmaa5VjfTVCVah14x1TP13//+H/KEh+GeI02i
fDVPofags7Gsj2k3ap6lMPE09vDOT2qnEKQQYVDoEMuEusNV5rDDKChjP5Ol
odvqJiqmnlkPtlE4/vE7+JSraTSZ8r+G1HQsZ+l5Xutht9kiR3yZDXaZ9f0R
2OOoVVBylY7Iac7mQl0yd1keHbACBqb8OE859ToKORqMUjOYuYpmczg2H3S7
aSSRpPWMHs2iMMSuHriSpWFphtjPhy+wImia5bfeXuPzv65z3ocPX9EMIl3A
3vQU47tFmSW3t97/a+P/SW2kxOHhn2w/35W/b29BNGRlDhTqCUIXxzrSIiN+
EB1MI30NrkE+M19AgAUivvpej0SMUUB+zuax8InnEhklCxnhz+dxFEisVjVn
vTyAeDU0Zj8XZmGYRtSlPCFjHilP49KdIZim2IVc8vzr1By7ISZnR9yXU7kv
bCcOO+A6VkdQyaFRuU8iG6TWLOKReN45TA1vcGAs9eHDOJpw9O2t+dN878HG
phhLQce6O/cnIDbIImjxFLox0gAFhc65CPUJJIzBXsY2hDVEUO8G5EGBoJkE
RioqVD5NyzjkyWvlIMshBgIyKA2EkC2gor11z0juFDYianNJ1OVnoQVE4lho
QLd0QPd+4JKa5wYZ2s8XtTlR1xYqr9aGeiSg9Cvv6wjYiEwDWR23grHmFc7m
OH4cy6FoW6OFl0I4mZrrlGKALzHSCuJI7MvqV2ksS1TAaFfPO4yhHOACIMas
TESdMHIEDynMnkJo7l0RwU+JuU3SNPSiUPur1h7J6vBT9GS5hueitsND5Bid
GdphHy/9a+5C2h0fyPBZQ2MsgYQehfZDvsFwL5/rIBpHAdmpCQVxMHlpjioG
rAJAbqgJvVTlJT3xA4AiM3A8XOUnaPo6SqgOlA4PYMkYaRweS/GMIhq3kaPb
a+dlIJ6LrrPgZogP+j2+5daLEuiv0YIMAhstCt0lpPVntZf68OFXMg72IM6w
NhRiqdvb9Q6VuWZ+MSUDo6ai+TGWDOkEx1GiQ7IZ8AsOpKBJIbspxaLH+MKA
kxoVkdGRM1c+sV6oEkCR63iMVTKKv2DAuNJmTVA6MXkNvyJw5BFdL00TkJO8
B0XitMFE8Ps9lQFiCOhSyQro3rXEPtIBFw1YSh7Dv61wWTYelwilujoJheYd
YP1AnTs2ns2tlomtpvOV+L+MBYbVYavYZuyqWMxhCPQNsDAwy3mb2t96VEsf
3LWBeyym6xeFnsFXMWpLxFE2NkbXPLnEL2+mCcGjfEY3hxwDVoPxJuyFmt5u
ZERvZIEI43TeHOzjeKPUy/SGXqxj6DRn6nh8TcVgCIYgeB56L+vchofnHYrt
Bv+GegYjACw3Wge11NdRitSQS5hwueqAPnyQ7II++8SYaOWy2jKhGrCuTECl
QXq5rNMMcMJAD0xJrSYAFMCOlG/BGfWEwVesTww6nVGlXg6H5x5RBOLBC/JL
ArWAKavy+EcnaYkwDAYjvZLVf0pH4jR7RI4yHPyp5JTyUUKxY1WEiiifOukX
JjCRfOFse7huOFMJlCGxxhcZwaGw3/BcPMSYTsYbQxbwBcFV704dzMs5D5zL
lh01gikhYhMO1oyE2Bbi0sR2/MI34d2TXWH8yq2KB5GxdpzrjkSQ86Ag0XhB
WIgIgjACD5hQnwT2yeI09mvYp0TPdr5IgmmWukIBuDLBsdZ73qXWlccywAse
3kJZ/d5gBIjReMzEu4McIIBTSl+sigTdRTIhK6E12DDjUjHUPwP5GYU9L4s6
ANZMwBQ3nci3UpD3SEVjc3ZRBmt4jlrL8SVf3PFMiLiPPCxbe5CaKqjFDKAD
vjt1zjfNEBVNWBmD1VdRnI7gbyGFjNEzTUKCkgP6dPLYQVJ7qpuGEYE8w1Uq
huFeRGtIvFHDdg3a9K0aCzq08MoFMZlZQTWvgc1cAFoGM0vZhUdVb1JoqcuN
nsNwR9D/ZqyB5LoNud3FTSLTVYXj+3sYQa0blfGV6K0xB4mUBGIzfcPj5ZG4
duwHp5CveoWGRYrqV3bc5CI4NU5jUJ/DGkTpgWcZbm7XB5632VPntKP9joXb
ZRZUyKs2VmWNFVAVqadYdTAtkyuM9EyFxVfWCpbBoEmEaM9zH/5PQUEBO8YR
IwBHt2QZrlG/afUYJYx8zS71O54uoBATyS9TaC4p5Bm4yP4L0SWHoxnLUwZF
0VukzmE6A2W5wJ0oFOFAxeiZESBVUs5GOgNjtxxXjL+JKncfaJb+mvzpVHsf
dGxmXPsiS33DI4GBEiIXzkDeXJxYt8s1qBKZJn659uFgFHNpExbrqCoJijV1
q5CVw8S/yy4KK7T3cyMAAZRmDe4zK+Miom0R8wL/mgSd9YWx5OT7aoa8sBDZ
SDVQHcAZGO3wZZJkmbDAcfTesASn53lIQZpAcSEmMJgrXPuZHFnAaQ1DV1hP
3yBQeenAcIJcwvlBGofBlEY1Q/AzrHGIgWNdi8qaC3ERF7norLatlA8cyx2+
o+jGGVTlPn22grMLGlHAuxidgf4sxwVjRpaxdQzmWWDHXXhBOKwe0mCchxzz
TByzfleypTDKbMwnDNJMuizp1B2BnHDEFJKEB+S4TFf0PHcGuHIMS5mMgyr4
XhiNQRw5RpviTjjGv1UfwFdXsLILKfXu4U+nnmH8tlJfPpSL9lQ943GfvyzN
+FfV+YUz/vILZrQ31x8/A8O312Xa+dnl8BdM++Z4+FfS5/66fsSM61qY1ssp
dY9QfuvGHDwkm/bW+n2vG2HyviGnTRNtqNyHgfrChCrTJNhrWdX7OIVq3UJB
q8dHVZ54V0aFsKkzwPI0TieLmooPXzQeL1VNCL6X8lITua70guUlGF/r9ZvL
Yatj/qtOz+T7xfF3b04ujo9aHa91+XL/1Ss+lC9uxOXLszevjupv9czDs9ev
j0+PjuXl6/0/YQ261NbZ+fDk7HT/VUtqFsb7Mf3O4INtqF9Kyw4Oz9XmTodt
HbW1ubnrIXXHd37lu80dpvAJh4bkv25WOpHwXus4l0ghKXFEZ28T7o9LEt5R
lAcpXAu9zfF71lsRmU/Oq8I19zlHqvBgPWq5NrXvUmuC6NCuzyRfahZug2by
JWkBN7EHMemjpGRgEQ4pLhSe2jpL4xqZnonp2RSNnF1xmD01/CgUiLQzQMuF
Z7OuOxNC+0iIsD7d4DFm2KbJBhzGSqBqDVqGfIva1/h0TVZZ4/M1kbstmlDa
gnlt/06qud4l4BlPdURIuczOowqR5KbmRSQXNiKaOCvHA8Rz8kUO7t1xcJv5
SdrEmI/AjmBSSEoWIYITpfg5C66gE0tmCxaSsBUOuxZMo3BtALimyiQiLDw5
chivAkYNAGU03dBr8DnGW6MhyjN4sIrYLLAiVQKIcUCNld+nO2UWezlya2MF
O093nquD/cvjpztVIXzuL+LUVPA+Yoic2lalG1mspUr0Y+0wTVhW6w4Xc71W
U+itNeoxGylIK2xVbQ2JeMwSFDHcsn6tGJlbTfIhgPxJktq8bmVX4irPGs7K
ErQjwfKUhLRBqFquqyIJc5HaGo7kXq6CubwFMvb2cW/S6zRaQ7aaUSfmdi+b
SDposyRcP/cMBgUm7NIS2INNiaWY9uZFRJhTjSbyMxorJ2RpUhkmEsstsS63
DbGfgJkaetToXMUswWeSfHvEk+IerF0JyVSziOu8j2YlcgbWvqNECqKiVYJS
lzF+w297RmOfPnmy/ZT4aga6oWIA4uJrXPmzqpHUCBG8ABMWhpGN9esQIRUf
yydjuwei3YLjElde/2jFGne+cI0ZiqyzWkelAbOwKBpRFwkBsrGjNS8QZA2G
MnUe4caPCuXqPHJOKNqcuQVIxnPtTVJTSq8LOUtpFf3XEhhY9l+N/T6ZlVmu
0dPDCdHTXkf+fWWlduWxeGhXPm/wxSUNTJhJxbgEg95cvDIux8xe2dmW5lxi
EXY8g/Ad6OZs0UbWNKVuSwspnE3XK3XYPY3LynLM8vB/lcO1opDy0HLiVKca
EjnvKQJ5LnIu19f9OlEmrJiT80lhy0F31sOA9O8oqnkfV9PuooLCvzDcujN+
VSpgZR8aN3NH5mY45PIexHXnwuswTe4zgMWRSdyKSrXuC/QSOO7wtlZRQEaZ
0XmM0pAlpwc8Pg96suyXmS7md1b/CYIe6q45vxDqWBdVSBc20K15SPmBRsaF
4CbRNRevTooVnyXKL5YuS1HIso6xXTVmdQCAqaQDlIqmjv05Ffeu5QEHXT5p
Q5GzIdsPlBXqpBOcCUyxHrwzvovGIaOklWqoCumnAZjKjGVa0R4oj9wI8CpT
cwJdUpQXBsLbqMTqYRZdR9IN8uZ+cKWZ+AKxpXISDgt89iClqBbZTmzVDJMW
jx/FXtuVHNfZDz47OhuQsXYXzIenkNzcOHqRiXTMqiZ1bvCa14QajXjmuqK2
NexPJpmeEKm7EoEpy7LVBdNlv1AEZ6spUE67ZG4aN6ua3SjeGvfqAr7byHgR
AJTQoSzjCeqenJQuG7lDqNrOn7jgaQySIXTdhJsY4xGSvObFik4F4Jt3BXJI
G6gwYIph27+uuFvO3ZlWTMJEK7J7KlVES2QD+ULXSql4O2MAEM3LMQ5ObvO5
lF0fhGNSGxMf5/pryujL68Xld69kS6JOweSuuXy41Fy+r93nIp2dlI5+krac
wR2Wpjr/o81xqHyLxnJrqKgu/0wBZuF0AykwmipTRxxw0p377BMWBZU/k/I7
g8QUPBZJjH3pF+W5P9G2s8N54/HHE2FoPV4kMHdb8ExSR/H37hASQnKqR2fp
poNXlc9EcPOlGG5rzrRn2ydUGrCTf5v+5B+Hry4Rbx68zCfY/jXjTnWdwDG2
2ZGWuyFOqQEZytncKBM7fg8cXE1KJnp1ZK5L1Tn1ysvLyNyGqUvrpg6dcJ5k
b7xyiXhpmOK5Pq40AtmxZj7JdNxn23ZZTwXGNhGL9xERqq0Fqt9FYV0o93k7
Vto95jy2qGsS1aoVg+weOmWcyzphh3i2gij7Y9/iT3xaBuSecJZog+l7sBZk
O/AL4xIJ/l2yNi4aY52xL2FrV1cVn0mDWoZrjoCRdtSZA0hAdFc3eJ2UbHB+
xlakDTxfete4z+aZ+2zK9I6WD0+cQVrslT+2TGH6xwb75KwvQTnrFr9n8gte
eEJW9L5OBYQf2k1bPljVdk1d4Wu5SKuUujD+fuBKfCRrw9wJ782nczngxmav
b1+/Aa+6+9CzYqAsrXi7udnbsQP2A17MG6jfbPzGPnmZYnlHoblJLZ/Dqi89
UN9qPe/ux7zLYogyeUBFlaVik5dy1dm39umR3NO9LJOO6j9Rv0fo5L101e8P
tvHPM/XNa1cdvRQJD9Q+QvdUb2z1thwR/LtLiJal8QAQoBvwSUfNyrzoZuyq
RLwObIcfv5/DJ+XY1C86auupbLq5u/sMBAywL6irN/2Dz4vZhiHdY2Zg9EHV
4QUUvtLJpJgOlFwy5qfmxEARjAH57m12GBr3dvr9h1m3vDTx5kDdBysdZzd3
t3r9HhiyvTvYfvr0yc4dFVUoolTTXFn1saU7Vlkf1jaxyIa6fcVCz1707Pnm
dPx0p9v/26vfL+LhPbLcrNRWwx3ydxBw059Fr7eg1zv/SHrd/1ur9Z3aa/Nk
2xRoVDw/raEr/vDvr6CfR482B1u7/0h6tLn5d/KPTRO+U7eYRjrVWqlHSJfp
0hQzVjJ4fj58Iang3bB+SS+//Aqq5wFqIxdotx4rk9b6i2rO4wTTnPE4NnGG
N1vkP8dv7T2zttyxYCOio1oAphl/esO+FAtr7H9xipmRI0cPirfhqN0yFiar
/ZompvaUGcPLfW91Hvhz/db0A9q/fguj/KHFYa0fOSMaKzy8PL74w/HFD9JI
O74cvn19PHx5dtT6Ue3tqRZmtNbVB7mbgNGsUi7astO6fYwPL+qp5kKvz4bH
b/ePji6wSk+6Lb2P35+fXQxbP77gGrdKx7kWcsDsMi6qY0hDo926PH51fDhU
75iuvFNfX5y9Vu+O5DuWvr9j2vr+5fHFsXpHet9hzTWhfK3VoN1sivzV7TjW
RTB962eZv3DUdNTrPyHXfLt/eXl22Jjrjm66Hm9N6VZW+6FFSoXLZpw5YXOm
0xfnCNVOf4cFKvU1fznSqmfa/1rqMq3fGqocdesNFlYbPGr1W6/B+If1gIDj
04rwuF2XKV2S8xHkPDx+hICdZOnK8gKu4p36Uh3tQ60u3xy0T8++b6931Mnp
EGfaf6WeqNcnp2+Gx+s1W38tme+ek50p9LfHUazfTnRBo6QV5+0WPMhgYyNK
5mUBvXnRUJtfLZF+cgoGDrnnmSO9bRSvY/V2/SFlbYFOsF21rY52oKyctbbe
Wta4O3i8rQ780EXgFc1xMjZL3DEZvDF1J8pp36Shdg03Wp4OGNI76uXx/lFH
GXV44d06HxanuW7jwVe/vcPb012vXC2407uL3zc/o5IfwiJPPCuL7tm4e0Bo
fGjbCCbFm99/jbsRDGSd5g+wpHKxvbvVHyErtLfrqyv0S798ua96XtfGbU5b
ZYu8MkdGINuepSykupqtue3vnSTmIAdsbkkYyFX75OCgg0xae/Z3niSQaGaj
+r1AvvEeobjf33kmv+Zc7yEI5YV0xP3A1iERK/K5b3J+Fsp0tlQquHBX3aSF
3Pj9BCebKp3rbrmWl7lzV11kBFk4dC6/x1m+dRWUWWYLz/OUtbBMh7B23xT4
pIbJ26X2EqCX65/d3SpzuZTlErxtXiE0PzEpbtIXrkjMCpb9LYFcpbc/2rDX
oesiR6P1uXJxzrMpPhkgt+v8wnQZTaFZfh8ihSh4FBaGmw2yvGpK45CBZre9
ujZm6sJTvWCt0LM9Mtb9x40GTH39buWCoRsvBU7fa/xsxjWF2iF7TzPpmI54
YVkHV+6Ia1h3jZWyLBqVhV6Xbqa9ROPumrhm7PLW1U+noK+FuXsAUqK5tBDc
9Rp32tV20p2n6fDHztLuNL9+kIqWdCsiXiKsO3L2YC+cGkrJbHV39/MgW0m0
/bFEIBrb4vuhP2e5iY3BR1vOF1QPiPZszIJcxqasaeKaynvumolSFqRAcg14
Zerl2s/C9AYZgatg/V5+j+bJVd9PEbD1dNOa7mrahM+X0c9yjL01/I9OfzdD
6PEnpe4luthIM16yCNcaYQN51NpPyfb0+eTpk+bzIsXzMoaX+x1QXxlr8xvx
kR+DmYulkYCme9CdYu231dMv0zm04f0sTvK9tTJLBjzMoJjNBwZirq0ErhHg
6lWXvYa9NWm/rw7ISadL+D56CcP8s4/3P69tOBq+3Ih+vit6gJAgi1z8OBQ7
lY5j7Ub5f44QFRF/rVs3YqzWSFB5gOmPY9lDTH+c2AzTDWTjoe85aPaJg5oU
lpbhSwK4fM7Po11X2e5msvPsc2qXoK3Haxc8zN5a/xepVJnFe2vWEBtFgQdq
EI9SPQa9CrvY6LIUGgZLf5orH+rkO6viHxdK/krlu08mn1H5cFT/E0fdD66S
9AbAZsKXSxHF3AM4+e4TJ368Fpb5s83JzpOfPqMWCjr7BWq4onGPclVxWpsw
tnOhetmGDVL/XLpxH6c+p2PCUT51rEv2P/O8uo2E8/0PTFubW3lHAAA=

-->

</rfc>

